The CoMSES Net Computational Model Peer Review process uses a straightforward checklist to verify that a computational model's source code and documentation meet baseline standards derived from [*good enough practices*]({{build_absolute_uri("/resources/guides-to-good-practice/")}}) in the software engineering and scientific communities we serve. The goal of this process is to encourage publication and sharing of higher quality models that align with the [FAIR Principles for Research Software (FAIR4RS)](https://doi.org/10.15497/RDA00068) and promote "frictionless reuse", enabling others to more easily understand, reuse or extend a model.

Reviewers should evaluate computational models based on the following criteria:

1. **Ease of Execution**. Can the model be run with a reasonable amount of effort? This may involve compilation into an executable, resolving input data dependencies or software library dependencies - all of which should be clearly documented by the author(s).
2. **Thorough Documentation**. Is the model accompanied by detailed narrative documentation? This should be provided as a standalone document, as comments or other in-code descriptions (e.g., in NetLogo's info tab) are **not sufficient**. Narrative documentation should adhere to the [ODD protocol](http://www.ufz.de/index.php?de=40429) or an equivalent documentation framework and present a cogent high level overview of how the model works as well as essential internal details and assumptions. The documentation should ideally be comprehensive enough for another computational modeler to replicate the model and its results without needing to refer to the source code. Visual aids like flowcharts, equations, and diagrams are highly encouraged.
3. **Code Quality**. Is the source code clean, well-structured, and easy to understand? Code should have semantically meaningful variable names and relevant comments that clearly explain methods, functions, and parameters. [Technical debt](https://doi.org/10.48550/arXiv.2403.06484) hinders comprehension and reuse. Examples of technical debt include unused or duplicated code, excessive use of global variables, or overly complex and difficult-to-follow logic. Clean, well-documented and well-structured code makes it easier for others to review, reuse, or extend the code.

For examples of computational models that have successfully passed peer review, please visit the [Computational Model Library]({{build_absolute_uri("/codebases/?peerReviewStatus=reviewed")}}).

Reviewers are not required to assess the theoretical soundness, scientific merit, or validity of model outputs. However, they may privately raise any concerns about these or other aspects of the model with the review editors.
